import torch
import torch.nn as nn
from torch.utils.data import Dataset, DataLoader, random_split
from torch.utils.tensorboard import SummaryWriter
from dataset import BilingualDataset, causal_mask
from model import build_transformer
from config import get_weights_file_path, get_config

from datasets import load_dataset
from tokenizers import Tokenizer
from tokenizers.models import BPE
from tokenizers.trainers import BpeTrainer
from tokenizers.pre_tokenizers import ByteLevel
from tqdm import tqdm
from pathlib import Path

def greedy_decode(model, encoder_input, encoder_mask, tokenizer_src, tokenizer_target, max_len, device):
    sos_idx = tokenizer_target.token_to_id('[SOS]')
    eos_idx = tokenizer_target.token_to_id('[EOS]')

    # pre-compute encoder output and reuse it for every token we get from decoder
    encoder_output = model.encode(encoder_input, encoder_mask)
    # intialize decoder input with SOS token
    decoder_input = torch.empty(1, 1).fill_(sos_idx).type_as(encoder_input).to(device)

    while True:
        if decoder_input.size(1) == max_len:
            break

        # build mask for target
        decoder_mask = causal_mask(decoder_input.size(1)).type_as(encoder_mask).to(device)

        # calculate output of the decoder
        out = model.decode(decoder_input, encoder_output, encoder_mask, decoder_mask)  # (1, current_seq_length, d_model)

        # get next token (output corresponding to the last token generated by the decoder)
        prob = model.project(out[:, -1])  # (1, target_vocab_size)
        # select token with max probability (greedy search)
        _, next_word = torch.max(prob, dim=1)  # torch.max returns (maximum value, index (the token ID) of that maximum value)
        # (1, current_seq_length + 1)
        decoder_input = torch.cat([decoder_input, torch.empty(1, 1).fill_(next_word.item()).type_as(encoder_input).to(device)], dim=1)

        if next_word == eos_idx:
            break

    return decoder_input.squeeze(0)  # remove batch dimension

def run_validation(model, validation_ds, tokenizer_src, tokenizer_target, max_len, device, print_msg, global_state, writer, num_examples=2):
    model.eval()
    count = 0

    source_texts = []
    expected = []
    predicted = []

    # size of control window
    console_width = 80

    with torch.no_grad():
        for batch in validation_ds:
            count += 1
            encoder_input = batch["encoder_input"].to(device)  # (batch_size, seq_length)
            encoder_mask = batch["encoder_mask"].to(device)  # (batch_size, 1, 1, seq_length)

            assert encoder_input.size(0) == 1, "batch size must be 1 for validation"

            # shape: (generated_seq_len,)
            model_out = greedy_decode(model, encoder_input, encoder_mask, tokenizer_src, tokenizer_target, max_len, device)

            source_text = batch["src_text"][0]
            target_text = batch["target_text"][0]
            model_out_text = tokenizer_target.decode(model_out.detach().cpu().numpy())

            source_texts.append(source_text)
            expected.append(target_text)
            predicted.append(model_out_text)

            # print to console
            print('-' * console_width)
            print_msg(f'SOURCE: {source_text}')
            print_msg(f'TARGET: {target_text}')
            print_msg(f'PREDICTED: {model_out_text}')

            if count == num_examples:
                break

def get_all_sentences(ds, lang):
    for item in ds:  # ds: dataset
        yield item['translation'][lang]  # yields sentences one by one, memory efficient as dataset could be huge

def get_or_build_tokenizer(config, ds, lang):
    tokenizer_path = Path(config['tokenizer_file'].format(lang))  # becomes "tokenizer_en.json" if lang is 'en'
    if not Path.exists(tokenizer_path):
        tokenizer = Tokenizer(BPE(unk_token='[UNK]'))
        tokenizer.pre_tokenizer = ByteLevel(add_prefix_space=True)  # split text on whitespace initially
        trainer = BpeTrainer(vocab_size=config["tokenizer_vocab_size"], special_tokens=["[UNK]", "[PAD]", "[SOS]", "[EOS]"], min_frequency=2)  # only include words that appear at least twice
        tokenizer.train_from_iterator(get_all_sentences(ds, lang), trainer=trainer)  # training tokenizer
        tokenizer.save(str(tokenizer_path))
    else:
        tokenizer = Tokenizer.from_file(str(tokenizer_path))

    return tokenizer

def get_ds(config):
    ds_raw = load_dataset('opus_books', f'{config["lang_src"]}-{config["lang_target"]}', split="train")
    
    # build tokenizers
    tokenizer_src = get_or_build_tokenizer(config, ds_raw, config["lang_src"])
    tokenizer_target = get_or_build_tokenizer(config, ds_raw, config["lang_target"])

    # from train split, we keep 90% for training and 10% for val
    train_ds_size = int(0.9 * len(ds_raw))
    val_ds_size = len(ds_raw) - train_ds_size
    train_ds_raw, val_ds_raw = random_split(ds_raw, [train_ds_size, val_ds_size])

    train_ds = BilingualDataset(train_ds_raw, tokenizer_src, tokenizer_target, config["lang_src"], config["lang_target"], config["seq_length"])
    val_ds = BilingualDataset(val_ds_raw, tokenizer_src, tokenizer_target, config["lang_src"], config["lang_target"], config["seq_length"])

    max_len_src = 0
    max_len_target = 0

    for item in ds_raw:
        src_ids = tokenizer_src.encode(item["translation"][config["lang_src"]]).ids
        target_ids = tokenizer_target.encode(item["translation"][config["lang_target"]]).ids
        max_len_src = max(max_len_src, len(src_ids))
        max_len_target = max(max_len_target, len(target_ids))

    print(f'Max length of source sentence: {max_len_src}')
    print(f'Max length of target sentence: {max_len_target}')

    train_dataloader = DataLoader(train_ds, batch_size=config["batch_size"], shuffle=True)
    val_dataloader = DataLoader(val_ds, batch_size=1, shuffle=True)

    return train_dataloader, val_dataloader, tokenizer_src, tokenizer_target

def get_model(config, vocab_src_len, vocab_target_len):
    model = build_transformer(vocab_src_len, vocab_target_len, config["seq_length"], config["seq_length"], config["d_model"])
    return model

def train_model(config):
    device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    print(f'Using device {device}')

    Path(config["model_folder"]).mkdir(parents=True, exist_ok=True)

    train_dataloader, val_dataloader, tokenizer_src, tokenizer_target = get_ds(config)
    model = get_model(config, tokenizer_src.get_vocab_size(), tokenizer_target.get_vocab_size()).to(device)

    # Tensorboard
    writer = SummaryWriter(config["experiment_name"])

    optimizer = torch.optim.Adam(model.parameters(), lr=config["lr"], eps=1e-9)

    initial_epoch = 0
    global_step = 0
    if config["preload"]:  # indicates training should resume from a previous checkpoint
        model_filename = get_weights_file_path(config, config=["preload"])  # specific epoch number stored in `config["preload"]`
        print(f'Preloading model {model_filename}')
        state = torch.load(model_filename)
        model.load_state_dict(state['model_state_dict'])
        initial_epoch = state["epoch"] + 1
        optimizer.load_state_dict(state["optimizer_state_dict"])  # restores optimizer state (imp for Adam)
        global_step = state["global_step"]  # restores total number of batches processed so far

    # ignore padding tokens when calculating loss, label_smoothing is a regularization technique
    loss_fn = nn.CrossEntropyLoss(ignore_index=tokenizer_target.token_to_id("[PAD]"), label_smoothing=0.1).to(device)

    for epoch in range(initial_epoch, config["num_epochs"]):
        
        batch_iterator = tqdm(train_dataloader, desc=f'Processing epoch {epoch:02d}')
        for batch in batch_iterator:
            model.train()
            encoder_input = batch["encoder_input"].to(device)  # (B, seq_length)
            decoder_input = batch["decoder_input"].to(device)  # (B, seq_length)
            encoder_mask = batch["encoder_mask"].to(device)  # (B, 1, 1, seq_length)
            decoder_mask = batch["decoder_mask"].to(device)  # (B, 1, seq_length, seq_length)

            # run tensors through the transformer
            encoder_output = model.encode(encoder_input, encoder_mask)  # (B, seq_length, d_model)
            decoder_output = model.decode(decoder_input, encoder_output, encoder_mask, decoder_mask)  # (B, seq_length, d_model)
            proj_output = model.project(decoder_output)  # (B, seq_length, target_vocab_size)

            label = batch["label"].to(device)  # (B, seq_length)

            # (B, seq_length, target_vocab_size) --> (B * seq_length, target_vocab_size)
            loss = loss_fn(proj_output.view(-1, tokenizer_target.get_vocab_size()), label.view(-1))
            batch_iterator.set_postfix({f"loss": f"{loss.item():6.3f}"})

            # log the loss
            writer.add_scalar("train_loss", loss.item(), global_step)
            writer.flush()

            loss.backward()

            optimizer.step()
            optimizer.zero_grad()

            global_step += 1

        run_validation(model, val_dataloader, tokenizer_src, tokenizer_target, config["seq_length"], device, lambda msg: batch_iterator.write(msg), global_step, writer)

        # save model after each epoch
        model_filename = get_weights_file_path(config, f'{epoch:02d}')
        torch.save({
            "epoch": epoch,
            "model_state_dict": model.state_dict(),
            "optimizer_state_dict": optimizer.state_dict(),
            "global_step": global_step
        }, model_filename)

if __name__ == "__main__":
    config = get_config()
    train_model(config)